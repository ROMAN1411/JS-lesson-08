// –ö–æ–ª–µ–∫—Ü—ñ—è –æ–±'—î–∫—Ç—ñ–≤ –¥–ª—è –≤—Å—ñ—Ö –ø—Ä–∏–∫–ª–∞–¥—ñ–≤ –∑ –∞–≤—Ç–æ–º–æ–±—ñ–ª—è–º–∏
const cars = [
  {
    make: 'Honda',
    model: 'CR-V',
    type: 'suv',
    amount: 14,
    price: 24045,
    onSale: true,
  },
  {
    make: 'Honda',
    model: 'Accord',
    type: 'sedan',
    amount: 2,
    price: 22455,
    onSale: true,
  },
  {
    make: 'Mazda',
    model: 'Mazda 6',
    type: 'sedan',
    amount: 8,
    price: 24195,
    onSale: false,
  },
  {
    make: 'Mazda',
    model: 'CX-9',
    type: 'suv',
    amount: 7,
    price: 31520,
    onSale: true,
  },
  {
    make: 'Toyota',
    model: '4Runner',
    type: 'suv',
    amount: 19,
    price: 34210,
    onSale: false,
  },
  {
    make: 'Toyota',
    model: 'Sequoia',
    type: 'suv',
    amount: 16,
    price: 45560,
    onSale: false,
  },
  {
    make: 'Toyota',
    model: 'Tacoma',
    type: 'truck',
    amount: 4,
    price: 24320,
    onSale: true,
  },
  {
    make: 'Ford',
    model: 'F-150',
    type: 'truck',
    amount: 11,
    price: 27110,
    onSale: true,
  },
  {
    make: 'Ford',
    model: 'Fusion',
    type: 'sedan',
    amount: 13,
    price: 22120,
    onSale: true,
  },
  {
    make: 'Ford',
    model: 'Explorer',
    type: 'suv',
    amount: 6,
    price: 31660,
    onSale: false,
  },
];
console.table(cars);
console.log('-------------------- Example - 01 --------------------');
{
  /** –ú–µ—Ç–æ–¥ map
   *
   * –ù–µ—Ö–∞–π —Ñ—É–Ω–∫—Ü—ñ—è getModels –ø–æ–≤–µ—Ä—Ç–∞—î –º–∞—Å–∏–≤ –º–æ–¥–µ–ª–µ–π ( –ø–æ–ª–µ model ) –≤—Å—ñ—Ö –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ–≤.
   */

  const getModels = cars => cars.map(car => car.model);

  //   console.table(getModels(cars));
  //   console.log(getModels(cars));
}
console.log('-------------------- Example - 02 --------------------');
{
  /** –ú–µ—Ç–æ–¥ map
   *
   *–ù–µ—Ö–∞–π —Ñ—É–Ω–∫—Ü—ñ—è makeCarsWithDiscount –ø–æ–≤–µ—Ä—Ç–∞—î –Ω–æ–≤–∏–π –º–∞—Å–∏–≤ –æ–±'—î–∫—Ç—ñ–≤ —ñ–∑ –∑–º—ñ–Ω–Ω–∏–º 
   –∑–Ω–∞—á–µ–Ω–Ω—è–º –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ price –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –ø–µ—Ä–µ–¥–∞–Ω–æ—ó –∑–Ω–∏–∂–∫–∏.
   */

  const makeCarsWithDiscount = (cars, discount) => {
    return cars.map(car => ({
      ...car,
      price: car.price * (1 - discount),
    }));
  };

  //   console.table(makeCarsWithDiscount(cars, 0.2));
  //   console.log('--------------------------------------------------');
  //   console.table(makeCarsWithDiscount(cars, 0.4));
}
console.log('-------------------- Example - 03 --------------------');
{
  /** –ú–µ—Ç–æ–¥ filter
   *
   * –ù–µ—Ö–∞–π —Ñ—É–Ω–∫—Ü—ñ—è filterByPrice –ø–æ–≤–µ—Ä—Ç–∞—î –º–∞—Å–∏–≤ –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ–≤, —Ü—ñ–Ω–∞ —è–∫–∏—Ö –º–µ–Ω—à–∞,
   * –Ω—ñ–∂ –∑–Ω–∞—á–µ–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ threshold.
   */

  const filterByPrice = (cars, threshold) =>
    cars.filter(({ price }) => price < threshold);

  //   console.table(filterByPrice(cars, 30000));
  //   console.table(filterByPrice(cars, 25000));
}
console.log('-------------------- Example - 04 --------------------');
{
  /**–ú–µ—Ç–æ–¥ filter
   *
   * –ù–µ—Ö–∞–π —Ñ—É–Ω–∫—Ü—ñ—è getCarsWithDiscount –ø–æ–≤–µ—Ä—Ç–∞—î –º–∞—Å–∏–≤ –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ–≤
   * –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å onSale —è–∫–∏—Ö true.
   */

  const getCarsWithDiscount = cars => cars.filter(({ onSale }) => onSale);

  //   console.table(getCarsWithDiscount(cars));
}
console.log('-------------------- Example - 05 --------------------');
{
  /** –ú–µ—Ç–æ–¥ filter
   *
   *–ù–µ—Ö–∞–π —Ñ—É–Ω–∫—Ü—ñ—è getCarsWithType –ø–æ–≤–µ—Ä—Ç–∞—î –º–∞—Å–∏–≤ –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ–≤ —Ç–∏–ø —è–∫–∏—Ö –∑–±—ñ–≥–∞—î—Ç—å—Å—è 
   –∑—ñ –∑–Ω–∞—á–µ–Ω–Ω—è–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ type.
   */

  const getCarsWithType = (cars, type) =>
    cars.filter(({ type: carType }) => carType === type);

  //   console.table(getCarsWithType(cars, 'suv'));
  //   console.table(getCarsWithType(cars, 'sedan'));
}
console.log('-------------------- Example - 06 --------------------');
{
  /** –ú–µ—Ç–æ–¥ find */

  const getCarByModel = (cars, model) =>
    cars.find(({ model: carModel }) => carModel === model);

  //   console.log(getCarByModel(cars, 'F-150'));
  //   console.log(getCarByModel(cars, 'CX-9'));
}
console.log('-------------------- Example - 07 --------------------');
{
  /** –ú–µ—Ç–æ–¥ sort
   *
   * –ù–µ—Ö–∞–π —Ñ—É–Ω–∫—Ü—ñ—è sortByAscendingAmount –ø–æ–≤–µ—Ä—Ç–∞—î –Ω–æ–≤–∏–π –º–∞—Å–∏–≤ –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ–≤,
   *  –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏–π –∑–∞ –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è–º –∑–Ω–∞—á–µ–Ω–Ω—è –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ amount.
   */

  //   const sortByAscendingAmount = cars =>
  //     [...cars].sort((a, b) => a.amount - b.amount);

  const sortByAscendingAmount = cars =>
    [...cars].sort(({ amount: a }, { amount: b }) => a - b);

  //   console.table(sortByAscendingAmount(cars));
}
console.log('-------------------- Example - 08 --------------------');
{
  /** –ú–µ—Ç–æ–¥ sort
   * –ù–µ—Ö–∞–π —Ñ—É–Ω–∫—Ü—ñ—è sortByDescendingPrice –ø–æ–≤–µ—Ä—Ç–∞—î –Ω–æ–≤–∏–π –º–∞—Å–∏–≤ –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ–≤,
   * –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏–π –∑–∞ –∑–º–µ–Ω—à–µ–Ω–Ω—è–º –∑–Ω–∞—á–µ–Ω–Ω—è –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ price.
   */

  const sortByDescendingPrice = cars =>
    [...cars].sort(({ price: a }, { price: b }) => b - a);

  //   console.table(sortByDescendingPrice(cars));
}
console.log('-------------------- Example - 09 --------------------');
{
  /** –ú–µ—Ç–æ–¥ sort
   *
   *–ù–µ—Ö–∞–π —Ñ—É–Ω–∫—Ü—ñ—è sortByModel –ø–æ–≤–µ—Ä—Ç–∞—î –Ω–æ–≤–∏–π –º–∞—Å–∏–≤ –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ–≤ –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏–π 
   –∑–∞ –Ω–∞–∑–≤–æ—é –º–æ–¥–µ–ª—ñ –≤ –∞–ª—Ñ–∞–≤—ñ—Ç–Ω–æ–º—É —Ç–∞ –∑–≤–æ—Ä–æ—Ç–Ω–æ–º—É –∞–ª—Ñ–∞–≤—ñ—Ç–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É, 
   –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ –∑–Ω–∞—á–µ–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ order.
   */

  //   const sortByModel = (cars, order) => {
  //     if (order === 'asc') {
  //       return [...cars].sort((a, b) => a.model.localeCompare(b.model));
  //     } else {
  //       return [...cars].sort((a, b) => b.model.localeCompare(a.model));
  //     }
  //   };

  const sortByModel = (cars, order) =>
    [...cars].sort(({ model: a }, { model: b }) =>
      order === 'asc' ? a.localeCompare(b) : b.localeCompare(a),
    );

  //   console.table(sortByModel(cars, 'asc'));
  //   console.table(sortByModel(cars, 'desc'));
}
console.log('-------------------- Example - 10 --------------------');
{
  /**  –ú–µ—Ç–æ–¥ reduce
   * –ù–µ—Ö–∞–π —Ñ—É–Ω–∫—Ü—ñ—è getTotalAmount –ø–æ–≤–µ—Ä—Ç–∞—î –∑–∞–≥–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ–≤
   * (–∑–Ω–∞—á–µ–Ω–Ω—è –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç–µ–π amount).
   */

  const getTotalAmount = cars =>
    cars.reduce((acc, { amount }) => {
      return acc + amount;
    }, 0);
  //   console.log(getTotalAmount(cars));
}
console.log('-------------------- Example - 11 --------------------');
{
  /** –õ–∞–Ω—Ü—é–∂–∫–∏ –º–µ—Ç–æ–¥—ñ–≤
   *
   * –ù–µ—Ö–∞–π —Ñ—É–Ω–∫—Ü—ñ—è getModelsOnSale –ø–æ–≤–µ—Ä—Ç–∞—î –º–∞—Å–∏–≤ –º–æ–¥–µ–ª–µ–π –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ–≤,
   * –∞–ª–µ —Ç—ñ–ª—å–∫–∏ —Ç–∏—Ö, —è–∫—ñ –∑–∞—Ä–∞–∑ –Ω–∞ —Ä–æ–∑–ø—Ä–æ–¥–∞–∂—ñ.
   */

  const getModelsOnSale = cars =>
    cars
      .filter(({ onSale }) => onSale)
      .map(({ make, model }) => `${make} - ${model}`);

  //   console.table(getModelsOnSale(cars));
}
console.log('-------------------- Example - 12 --------------------');
{
  /** –õ–∞–Ω—Ü—é–∂–∫–∏ –º–µ—Ç–æ–¥—ñ–≤
   *
   * –ù–µ—Ö–∞–π —Ñ—É–Ω–∫—Ü—ñ—è getSortedCarsOnSale –ø–æ–≤–µ—Ä—Ç–∞—î –º–∞—Å–∏–≤ –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ–≤ –Ω–∞ —Ä–æ–∑–ø—Ä–æ–¥–∞–∂—ñ
   * (–í–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å onSale), –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏—Ö –∑–∞ –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è–º —Ü—ñ–Ω–∏.
   */

  /**
   * Get cars on sale and sort them
   * @param {Array} cars - Array with object
   * @returns {Array} - sorted Array onSale
   */

  const getSortedCarsOnSale = cars =>
    cars
      .filter(({ onSale }) => onSale)
      .sort(({ price: a }, { price: b }) => a - b);

  //   console.table(getSortedCarsOnSale(cars));
}
console.log('-------------------- Task 1 --------------------');
{
  const str = 'duaguidgasuidgauisdhasudasdfhsgvfakhfugduashc';
  const result = str.split('').reduce((acc, item) => {
    // –í–∞—Ä—ñ–∞–Ω—Ç ‚Ññ1
    // acc.hasOwnProperty(item) ? (acc[item] += 1) : (acc[item] = 1);

    // –í–∞—Ä—ñ–∞–Ω—Ç ‚Ññ2
    const keys = Object.keys(acc);
    keys.includes(item) ? (acc[item] += 1) : (acc[item] = 1);

    return acc;
  }, {});

  // console.log(result);
}
console.log('-------------------- Task 2 --------------------');
{
  // const arr = ['Honda', 'Audi', 'BMW', 'Skoda', 'Ford', 'Renault'];

  // –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∞–≤—Ç–æ 6:

  // 1 Honda
  // 2 Audi

  // 6 Reno

  // const arr = [];

  // –í–∏–±–∞—á—Ç–µ –∞–≤—Ç–æ –Ω–µ–º–∞—î

  function logCars(arr) {
    const result = arr.reduce(
      (acc, car, idx) => {
        return acc + `${idx + 1} - ${car}\n`;
      },
      arr.length
        ? `–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∞–≤—Ç–æ ${arr.length} \n`
        : `–í–∏–±–∞—á—Ç–µ –∞–≤—Ç–æ –Ω–µ–º–∞—î üò¢`,
    );
    return result;
  }

  // console.log(logCars(['Honda', 'Audi', 'BMW', 'Skoda', 'Ford', 'Renault']));
  // console.log(logCars([]));
}
